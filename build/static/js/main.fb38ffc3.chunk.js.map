{"version":3,"sources":["image/pnglogo.png","url.js","data.js","Fields.js","Validation.js","AddVisit.js","AddProvider.js","AddClinic.js","PastVisits.js","Authorized.js","App.js","ErrorBoundary.js","index.js"],"names":["module","exports","require","load","console","log","process","url","getMyClinics","fetch","method","then","r","json","showState","undefined","ar","Math","floor","random","length","reasons","firstState","provider","amountSpent","toFixed","reason","materials","receipt","SelectClinic","this","state","allMyClinics","SelectField","label","onChange","event","addValue","key","value","map","_id","name","Wrapper","children","Pane","display","padding","background","borderRadius","flex","alignItems","SubmitButton","submitted","waiting","onClick","reload","location","Button","doIt","setState","a","submit","appearance","DevInfo","newState","target","OneClinic","clinicID","visits","useState","spending","updateSpending","visitID","updateVisitID","useEffect","d","nameAmountPairs","Object","values","amount","providers","date","Date","toLocaleDateString","OneVisit","relevantVisits","filter","providerID","Err","style","AddVisitSchema","Yup","min","max","required","email","shape","clinic","LoginSchema","username","password","AddVisit","action","resetForm","headers","body","JSON","stringify","res","alert","submitError","providersByClinic","initialValues","validationSchema","onSubmit","isSubmitting","component","as","type","TextInputField","autoComplete","n","capture","accept","disabled","React","Component","See","errors","entries","SelectProvider","FormField","Checkbox","AddProvider","copy","Input","id","bind","SelectType","defaultValue","providerTypes","first","last","rando","val","AddClinic","desc","address","middle","PastVisits","clinicIdToName","reduce","allVisits","byClinic","v","concat","providersById","Authorized","Header","links","MyButton","props","height","margin","flexWrap","logout","show","paddingTop","justifyContent","width","border","App","region","Login","src","logo","alt","info","rep","catch","e","Error","StrictMode","ErrorBoundary","error","errorInfo","outline","toString","credentials","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb38ffc3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pnglogo.a87f43c6.png\";","const dotenv = require('dotenv');\n\ndotenv.load();\n\n// export const url = \"http://pglebapp.mqhhuyuruj.us-east-2.elasticbeanstalk.com/\"\n// export const url = \nconst proddata = process.env.REACT_APP_PROD_DATA\nconsole.log('jack7', proddata)\nexport const url = '/'\n// export const url = process.env.REACT_APP_PROD_DATA ? '/' : \"http://localhost:3001/\"\nexport const getMyClinics = () => fetch(url + 'clinic', { method: \"GET\", }).then(r => r.json())\n// export const automatic = true;\nexport const automatic = false;\n// export const showState = false;\nconst devShowState = false;\nexport const showState = process.env.showState !== undefined ? process.env.showState : devShowState\n","\nexport const r = ar => ar[Math.floor(Math.random() * ar.length)]\nexport const reasons = [\n  \"Educational Lunch\",\n  \"Resupply\",\n  \"In-Service\",\n  \"Issue Resolution/Tech Support\",\n  \"Educational Visit\"\n]\nexport const clinics = [\n  \"Sunshine Clinic\",\n  \"Best providers Office\",\n  \"Big Alligator providers\"\n]\n\nexport const firstState = () => {\n  return {\n    provider: '',\n    amountSpent: (Math.random() * 45).toFixed(2),\n    reason: r(reasons),\n    materials: 'stuff',\n    receipt: 'coming soon'\n  }\n}","import React, { useState, useEffect } from 'react';\nimport {\n  Pane, Button, SelectField, TextInputField,\n} from 'evergreen-ui';\nimport { showState, url } from './url';\n\nexport const SelectClinic = function () {\n  return this.state.allMyClinics ?\n    <SelectField\n      label=\"Choose a Clinic\"\n      onChange={event => this.addValue('clinic', event)}\n    >\n      <option key={0} value={0}>Choose A Clinic</option>\n      {this.state.allMyClinics.map(({ _id, name }) =>\n        <option key={_id} value={_id}>{name}</option>\n      )}\n    </SelectField> : 'loading Clinics'\n}\n\nexport const Provider = function () {\n  return <TextInputField\n    label=\"A controlled text input field\"\n    required\n    description=\"Name of provider\"\n    value={this.state.provider}\n    onChange={this.addValue.bind(this, 'provider')}\n  />\n}\nexport const Wrapper = ({ children }) => (\n  <Pane display=\"flex\" padding={6} background=\"tint2\" borderRadius={3}>\n    <Pane flex={1} alignItems=\"center\" >\n      {children}\n    </Pane>\n  </Pane>\n);\n\nexport const SubmitButton = function () {\n  const doIt = () => {\n    console.log(this)\n    this.setState({ submitted: false, waiting: true }, async () => {\n      await this.submit();\n      this.setState({ submitted: true })\n    })\n  }\n  const reload = () => location.reload(); //eslint-disable-line\n  const { submitted, waiting } = this.state;\n  if (waiting && !submitted) return 'Submitting Data'\n  if (submitted) return (\n    <div>\n      'Successfully Submitted'\n      <button onClick={reload}>Add Another</button>\n    </div>)\n  return <Button onClick={doIt} appearance=\"primary\">Submit</Button>\n}\n\nexport const DevInfo = ({ children }) => showState ? <>{children}</> : null\nexport const addValue = function (key, event) {\n  const newState = {};\n  const { value } = event.target\n  newState[key] = value\n  this.setState(newState)\n}\n\nexport const OneClinic = ({ clinicID, visits = [], name }) => {\n  const [spending, updateSpending] = useState({})\n  const [visitID, updateVisitID] = useState(null)\n  useEffect(() => { fetch(url + `getSpendingByDoctor/${clinicID}`).then(d => d.json()).then(updateSpending) }, [clinicID])\n  const nameAmountPairs = Object.values(spending)\n  return nameAmountPairs.length ? <>\n    In the last year your total spending by provider at this clinic has been:\n      {nameAmountPairs.map(({ amount, name, ...rest }) => <div key={name}>{name}: ${amount}</div>)}\n    <h2>Visits to {name} </h2>\n    <SelectField label='Choose Visit To See Details'\n      onChange={({ target }) => updateVisitID(target.value)}>\n\n      <option value='0'>Choose a Date</option>\n      {visits.map(({ providers, amountSpent, date, materials, receipt, _id, ...rest }) =>\n        <option key={_id} value={_id}>{new Date(date).toLocaleDateString()}</option>\n      )}\n    </SelectField>\n    <OneVisit visitID={visitID} visits={visits} spending={spending} />\n  </> : 'Choose Clinic Or None Found'\n}\n\nconst OneVisit = ({ visitID, visits, spending }) => {\n  console.log(visitID, visits, 'in one visit')\n  if (!visitID || visitID === '0') return 'Choose a Date'\n  else {\n    const relevantVisits = visits.filter(({ _id }) => _id === visitID)\n    if (!relevantVisits.length) return \"Loading or none found\";\n\n    const { amountSpent, providers, materials, receipt } = relevantVisits[0]\n    return <>\n      <h4>For This Visit</h4>\n      <div>\n        Amount Spent: {amountSpent}\n      </div>\n      <div>\n        Materials: {materials}\n      </div>\n      <div> Providers Present:\n        {providers.map(providerID => <div key={providerID}>{spending[providerID].name}</div>)}\n      </div>\n    </>\n  }\n\n}\n\n\nexport const Err = ({ children }) => <div style={{ background: 'red' }}>{children}</div>\n\n\n// export const SelectProvider = function ({ providers }) {\n//   return providers ?\n//     <Wrapper>\n//       Choose Providers Present\n//       {Object.values(providers).map(({ _id, name, chosen }) => <Checkbox\n//         key={_id}\n//         label={name}\n//         checked={chosen}\n//         onChange={() => {\n//           providers[_id].chosen = !chosen\n//           this.setState({ providerOptionsAtOneClinic: providers })\n//         }}\n//       />)}\n//     </Wrapper> : 'Loading Providers'\n// }\n","import * as Yup from 'yup';\n\nconst firstName = Yup.string()\n  .min(2, 'Too Short!')\n  .max(50, 'Too Long!')\n  .required('Required');\n\nconst lastName = Yup.string()\n  .min(2, 'Too Short!')\n  .max(50, 'Too Long!')\n  .required('Required')\n\nconst email = Yup.string()\n  .email('Invalid email')\n  .required('Required')\n\nexport const AddVisitSchema = Yup.object().shape({\n  clinic: Yup.string().min(2, \"Choose a clinic\").required('Required'),\n  providers: Yup.array().min(1, \"Choose at least one provider\").required('Required'),\n  amountSpent: Yup.string().min(1, \"Enter Amount Spent\").required('Required'),\n  reason: Yup.string().min(2, 'Choose Reason For Visit').required('Required'),\n  date: Yup.string().min(2, \"Enter Date and Time\").required('Required')\n  // firstName, lastName, \n});\nexport const LoginSchema = Yup.object().shape({\n  username: Yup.string().required(),\n  password: Yup.string().required()\n})","/*eslint-disable no-unused-vars*/\nimport React from 'react';\nimport { TextInputField, SelectField, Checkbox, Button, FormField, } from 'evergreen-ui';\nimport { url, getMyClinics, automatic } from './url';\nimport { firstState, reasons } from './data';\nimport { Select } from 'evergreen-ui/commonjs/select';\nimport { Wrapper, DevInfo, Err } from './Fields';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { AddVisitSchema } from './Validation';\n\nclass AddVisit extends React.Component {\n  constructor() {\n    super();\n    this.state = firstState()\n    this.state.allMyClinics = [];\n    this.state.submitError = null;\n  }\n  componentDidMount() {\n    getMyClinics().then(r => this.setState({ allMyClinics: r }));\n    fetch(url + 'getproviders')\n      .then(r => r.json())\n      .then(providersByClinic => this.setState({ providersByClinic }))\n  }\n  submit = async (values, { resetForm, ...rest }) => {\n    for (const action in rest) console.log(26, action)\n    // Object.entries(values).forEach(([k, v]) => console.log(k + ' ' + v))\n    await fetch(url + 'visit', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(values)\n    }).then(res => res.json()).then(res => {\n      console.log(61, res)\n      if (res && res._id) {\n        console.log('resetting')\n        resetForm()\n        alert(\"Successfully Submitted\")\n      }\n      else (this.setState({ submitError: res }))\n    })\n  }\n  render() {\n    const { providersByClinic, allMyClinics, clinic } = this.state;\n    console.log(44, process.env.NODE_ENV)\n    return (\n      <Formik\n        initialValues={\n          process.env.NODE_ENV === \"development\" ?\n            {\n              clinic: \"5dc33f20acaf6659567af212\", date: '2019-12-30T12:59',\n              providers: [\"5dc33f35acaf6659567af215\"],\n              reason: 'Educational Lunch',\n              amountSpent: 100 * Math.random(),\n            } :\n            { date: '', providers: [], amountSpent: '', reason: '0' }}\n        validationSchema={AddVisitSchema}\n        onSubmit={this.submit}\n      >\n        {({ isSubmitting, values, ...rest }) => {\n          return <Wrapper>\n            <Form>\n              <See values={values} />\n              <ErrorMessage component={Err} name={'clinic'} />\n              <Field name=\"clinic\" as={SelectField} label=\"Choose Clinic\" >\n                <option key={0} value={0}>Choose Clinic</option>\n                {allMyClinics.map(({ _id, name }) =>\n                  <option key={_id} value={_id} children={name} />)}\n              </Field>\n              <ErrorMessage component={Err} name={'date'} />\n              <Field name=\"date\" label=\"Date\"\n                type=\"datetime-local\" as={TextInputField}\n                autoComplete=\"true\" />\n              <SelectProvider providersByClinic={providersByClinic} clinic={values.clinic} />\n              <ErrorMessage component={Err} name={'reason'} />\n              <Field name=\"reason\" as={SelectField} label=\"Reason For Visit\">\n                <option value=\"0\" key={0}>Choose a Reason</option>\n                {reasons.map(n => <option value={n} key={n}>{n}</option>)}\n              </Field>\n              <ErrorMessage component={Err} name={'amountSpent'} />\n              <Field name=\"amountSpent\" as={TextInputField} label=\"Enter Amount Spent\" />\n              <label>Additional Notes:\n              <div><Field name=\"notes\" as=\"textarea\" /></div>\n              </label>\n              <TextInputField type=\"file\" capture=\"camera\" accept=\"image/*\" label=\"Add Receipt\" />\n              <div>\n                <Button type=\"submit\" disabled={isSubmitting} children=\"Submit\" />\n                {isSubmitting && \"Adding Visit\"}\n                {this.state.submitError && this.state.submitError}\n              </div>\n            </Form>\n          </Wrapper>\n        }}\n      </Formik>\n    );\n  }\n}\n\nconst See = ({ values, errors }) => <DevInfo>\n  {Object.entries(values)\n    .map(([key, value]) => <div key={key}>{key} value is {value || 'empty'}</div>)}\n</DevInfo>\n\nconst SelectProvider = ({ providersByClinic, clinic, ...rest }) => {\n  const providers = (providersByClinic && providersByClinic[clinic]) || []\n  return <FormField label=\"Choose Providers\" >\n    <ErrorMessage component={Err} name={'providers'} />\n    {providers.map(({ _id, name }) =>\n      <Field key={_id} label={name}\n        as={Checkbox} type=\"checkbox\" name=\"providers\"\n        value={_id} />)}\n  </FormField>\n}\n\nexport { AddVisit };","import React from 'react';\nimport { Button } from 'evergreen-ui/commonjs/buttons';\nimport { url, getMyClinics, automatic } from './url';\nimport { TextInputField } from 'evergreen-ui';\nimport { SelectField } from 'evergreen-ui/commonjs/select';\nimport random from 'random-name'\nimport { SelectClinic, DevInfo, SubmitButton } from './Fields';\n\nclass AddProvider extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      name: random.first() + ' ' + random.last(),\n      clinic: '',\n      type: 'MD',\n    }\n    this.providerTypes = ['MD', \"PA\", \"NP\", \"MSN\"];\n    this.SelectClinic = SelectClinic.bind(this)\n    this.SubmitButton = SubmitButton.bind(this);\n  }\n  submit = () => {\n    const copy = { ...this.state }\n    delete copy.allMyClinics\n    fetch(url + 'provider', {\n      method: \"POST\",\n      body: JSON.stringify(copy),\n      headers: { 'Content-Type': 'application/json' }\n    }).then(r => r.json()).then(r => { })\n  }\n  componentDidMount() {\n    getMyClinics().then(r => {\n      const rando = a => Math.floor(Math.random() * a)\n      this.setState({ type: this.providerTypes[rando(4)], allMyClinics: r, clinic: r[rando(r.length)]._id }, (automatic ? this.submit : () => { })\n      )\n    })\n  }\n  addValue(key, val) {\n    const newState = {};\n    newState[key] = val.target.value\n    this.setState(newState)\n  }\n  Input = ({ id, label }) => (<TextInputField\n    required\n    label={label}\n    value={this.state[id]}\n    onChange={this.addValue.bind(this, id)}\n  />)\n  SelectType = () => <SelectField\n    label=\"Provider Type\"\n    defaultValue=\"MD\"\n    onChange={event => this.addValue('type', event)}\n  >\n    {this.providerTypes.map(type =>\n      <option key={type} value={type}>{type}</option>\n    )}\n  </SelectField>\n  See = () => <DevInfo>\n    {Object.entries(this.state).map(([key, value]) => (key !== 'allMyClinics') &&\n      <div key={key}>{key} is {value}</div>)}\n  </DevInfo>\n  render() {\n    return (<>\n      <this.See />\n      <this.SelectClinic />\n      <this.Input id='name' label=\"Provider Name\" />\n      <this.SelectType />\n      <this.SubmitButton />\n    </>)\n  }\n}\n\nexport { AddProvider }\n","import React from 'react';\nimport { Button } from 'evergreen-ui/commonjs/buttons';\nimport { url, automatic } from './url';\nimport { TextInputField } from 'evergreen-ui';\nimport { SelectField } from 'evergreen-ui/commonjs/select';\nimport random from 'random-name'\nimport { SubmitButton, DevInfo } from './Fields';\n\nclass AddClinic extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      name: random.last() + ' Clinic',\n      address: '100 ' + random.middle() + ' St.'\n    }\n    this.SubmitButton = SubmitButton.bind(this);\n  }\n  submit = () => {\n    console.log(17)\n    fetch(url + 'clinic', {\n      method: \"POST\",\n      body: JSON.stringify(this.state),\n      headers: { 'Content-Type': 'application/json' }\n    }).then(r => {\n      console.log(23, r)\n      r.json()\n    }).then(r => {\n      console.log('add clinic', r)\n    })\n  }\n  componentDidMount() {\n    if (automatic) this.submit();\n  }\n  addValue(key, val) {\n    const newState = {};\n    newState[key] = val.target.value\n    this.setState(newState)\n  }\n  Input = ({ id, desc }) => {\n    return (<TextInputField\n      label={desc}\n      required\n      value={this.state[id]}\n      onChange={this.addValue.bind(this, id)}\n    />)\n  }\n  See = () => <DevInfo>\n    {Object.entries(this.state).map(([key, value]) => (\n      <div key={key}>{key} is {value}</div>\n    ))}\n  </DevInfo>\n  render() {\n    return (<>\n      <this.See />\n      <this.Input id='name' desc=\"Clinic Name\" />\n      <this.Input id='address' desc=\"Clinic Address\" />\n      <this.SubmitButton />\n    </>)\n  }\n}\n\nexport { AddClinic }\n","import React from 'react';\nimport { url } from './url';\nimport { Wrapper, SelectClinic, addValue, OneClinic } from './Fields';\nimport { r } from './data';\n\nexport class PastVisits extends React.Component {\n  constructor() {\n    super();\n    this.state = {}\n    this.SelectClinic = SelectClinic.bind(this)\n    this.addValue = addValue.bind(this)\n  }\n  componentDidMount() {\n    fetch(url + 'clinic').then(d => d.json()).then(allMyClinics => {\n      this.setState({ allMyClinics }, () => {\n        console.log(16, allMyClinics)\n        this.clinicIdToName = allMyClinics.reduce((a, { name, _id }) => {\n          a[_id] = name;\n          return a\n        }, {})\n        // this.setState({ clinic: r(allMyClinics)._id })\n      })\n    })\n    fetch(url + 'visits').then(d => d.json()).then(allVisits => {\n      this.setState({ allVisits }, () => {\n        const byClinic = allVisits.reduce((a, v) => {\n          const { clinic } = v;\n          a[clinic] = a[clinic] ? a[clinic].concat([v]) : [v]\n          return a\n        }, {})\n        this.setState({ byClinic })\n      })\n    })\n    fetch(url + 'getproviders').then(d => d.json())\n      .then(providersById => this.setState({ providersById }))\n  }\n\n  render() {\n    const { allVisits, clinic, byClinic = {} } = this.state;\n    console.log(this.state)\n    console.log(this.clinicIdToName)\n    return (\n      <Wrapper>\n        {allVisits ? <>\n          <this.SelectClinic />\n          <OneClinic clinicID={clinic} visits={byClinic[clinic]} name={this.clinicIdToName[clinic]} />\n        </> : \"Loading\"}\n      </Wrapper>\n    );\n  }\n}\n","import React from 'react';\nimport { AddVisit } from './AddVisit';\nimport { AddProvider } from './AddProvider';\nimport { Button } from 'evergreen-ui/commonjs/buttons';\nimport './App.css'\nimport { AddClinic } from './AddClinic';\nimport { Pane } from 'evergreen-ui';\nimport { PastVisits } from './PastVisits';\nimport { url } from './url';\nimport { Practice } from './Practice';\n\nclass Authorized extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      // show: AddProvider\n      show: AddVisit\n      // show: Practice\n      // show: AddClinic\n      // show: PastVisits\n    }\n  }\n  async logout() {\n    fetch(url + 'logout').then(() => location.reload()) //eslint-disable-line      \n  }\n  Header = () => {\n    const links = {\n      'Past Visits': PastVisits,\n      'Add Clinic': AddClinic,\n      'Add Provider': AddProvider,\n      'Add Visit': AddVisit,\n    }\n    const MyButton = props => <Button style={{ flex: '1 1 33%' }} height=\"36\" {...props} />\n    const style = { margin: 'auto' }\n    return <nav style={{ display: 'flex', flexWrap: 'wrap' }}>\n      <MyButton key='logout' onClick={this.logout} children={<span style={style}>Logout</span>} />\n      {Object.entries(links).map(([label, component]) =>\n        <MyButton key={label} appearance={component === this.state.show ? 'primary' : 'default'} onClick={() => this.setState({ show: component })}>\n          <span style={style}>{label}</span>\n        </MyButton>)}\n    </nav>\n  }\n\n  render() {\n    return <>\n      <this.Header />\n      {typeof this.state.show === 'function' ? (\n        <Pane\n          paddingTop={30}\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n        >\n          <Pane width=\"90vw\" border=\"default\">\n            <this.state.show />\n          </Pane>\n        </Pane>\n      ) : <div>you broke authorized.js</div>}\n    </>\n  }\n}\n\nexport { Authorized }\n\n\n","import React from 'react';\nimport { Button } from 'evergreen-ui/commonjs/buttons';\nimport './App.css'\nimport { url } from './url';\nimport { Authorized } from './Authorized';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { Wrapper, Err } from './Fields';\nimport { TextInputField, Pane } from 'evergreen-ui';\nimport { LoginSchema } from './Validation';\nimport logo from './image/pnglogo.png'\n\nclass App extends React.Component {\n  submit = values => {\n    fetch(url + 'login', {\n      method: \"POST\",\n      body: JSON.stringify(values),\n      headers: { 'Content-Type': 'application/json' }\n    }).then(r => r.json()).then(region => {\n      this.setState({ region })\n    })\n  }\n  componentDidMount() {\n    this.props.region.then(res => res.json())\n      .then(info => {\n        this.setState({ region: info.rep })\n      })\n      .catch(e => { throw new Error('app js setstate on comp did mount') })\n  }\n  Login = () => <Pane\n    display=\"flex\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    height=\"70vh\"\n  >\n    <Pane\n      width=\"90vw\"\n      border=\"default\">\n\n      <img src={logo} height=\"47px\" alt=\"pgl logo\" />\n      <Formik initialValues={process.env.NODE_ENV === \"development\" ?\n        { username: \"nm\", password: \"pglForLife\" } :\n        { username: '', password: '' }}\n        // { username: \"admin\", password: \"Wepgl4life\" }}\n        onSubmit={this.submit}\n        validationSchema={LoginSchema}>\n        {({ isSubmitting }) => <Form>\n          <ErrorMessage component={Err} name={'username'} />\n          <Field as={TextInputField} name=\"username\" label=\"Username\" />\n          <ErrorMessage component={Err} name={'password'} />\n          <Field as={TextInputField} name=\"password\" label=\"Password\" type=\"password\" />\n          <Button type=\"submit\" disabled={isSubmitting} children=\"Submit\" />\n        </Form>}\n      </Formik>\n    </Pane>\n  </Pane>\n\n  render() {\n    return <React.StrictMode >\n      {(this.state && this.state.region) ? <Authorized /> : < this.Login />}\n    </React.StrictMode>\n  }\n}\n\nexport default App;\n\n\n","import React from 'react';\n\nexport class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      error,\n      ...errorInfo\n    })\n  }\n\n  render() {\n    return this.state.error ? <>\n      <h1>Something went wrong.</h1>\n      {Object.entries(this.state).map(([key, value]) =>\n        <div style={{ outline: \"solid\", padding: \"10px\" }} key={key}>\n          {key} is {value.toString()}\n        </div>\n      )}    </> : this.props.children;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { url } from './url';\nimport { ErrorBoundary } from './ErrorBoundary';\n// import * as serviceWorker from './serviceWorker';\nconst region = fetch(url + 'login', { credentials: 'include' })\n\nReactDOM.render(\n  <ErrorBoundary>\n    <App region={region} />\n  </ErrorBoundary>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}