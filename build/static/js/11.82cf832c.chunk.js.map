{"version":3,"sources":["OneClinic.js"],"names":["OneClinic","clinicID","visits","clinicName","useState","spending","updateSpending","visit","updateVisit","useEffect","fetch","url","then","d","json","nameAmountPairs","Object","values","sort","b","amount","length","map","drName","name","key","toFixed","label","onChange","updateVisitByID","value","target","find","_id","date","Date","toLocaleDateString"],"mappings":"6NAIaA,EAAY,SAAZA,UAAa,GAA2C,IAAzCC,EAAwC,EAAxCA,SAAwC,IAA9BC,cAA8B,MAArB,GAAqB,EAAjBC,EAAiB,EAAjBA,WAAiB,EAC/BC,mBAAS,IADsB,mBAC3DC,EAD2D,KACjDC,EADiD,OAErCF,mBAAS,IAF4B,mBAE3DG,EAF2D,KAEpDC,EAFoD,KAOlEC,qBAAU,kBAAMD,EAAY,MAAK,CAACP,IAElCQ,qBAAU,WACRC,MAAM,GAAD,OAAIC,MAAJ,+BAA8BV,IAChCW,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,KAAKN,KAEP,CAACL,IACJ,IAAMc,EAAkBC,OAAOC,OAAOZ,GAAUa,MAC9C,WAAaC,GAAb,IAAGC,EAAH,EAAGA,OAAH,OAAmBD,EAAEC,OAASA,KAGhC,OAAIL,EAAgBM,OAEhB,2DACuBlB,EADvB,qDAGE,4BACGY,EAAgBO,KAAI,gBAAGF,EAAH,EAAGA,OAAcG,EAAjB,EAAWC,KAAX,OACnB,wBAAIC,IAAKF,GACNA,EADH,aACcH,QADd,IACcA,OADd,EACcA,EAAQM,QAAQ,QAIlC,yCAAevB,EAAf,aACA,kBAAC,gBAAD,CACEwB,MAAM,8BACNC,SA9BgB,SAAlBC,gBAAmB,GAAD,IAAaC,EAAb,EAAGC,OAAUD,MAAb,OACtBtB,EAAYN,EAAO8B,MAAK,qBAAGC,MAAkBH,QA+BvC,4BAAQA,MAAM,KAAd,iBAJF,OAKG5B,QALH,IAKGA,OALH,EAKGA,EAAQoB,KAAI,gBAAGY,EAAH,EAAGA,KAAMD,EAAT,EAASA,IAAT,OACX,4BAAQR,IAAKQ,EAAKH,MAAOG,GACtB,IAAIE,KAAKD,GAAME,0BAItB,kBAAC,WAAD,CAAU7B,MAAOA,EAAOF,SAAUA,KAInCJ,EACE,8CADe","file":"static/js/11.82cf832c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { url } from './url';\nimport { MySelectField, OneVisit } from './Fields';\n\nexport const OneClinic = ({ clinicID, visits = [], clinicName }) => {\n  const [spending, updateSpending] = useState({});\n  const [visit, updateVisit] = useState({});\n\n  const updateVisitByID = ({ target: { value } }) =>\n    updateVisit(visits.find(({ _id }) => _id === value));\n\n  useEffect(() => updateVisit({}), [clinicID]);\n\n  useEffect(() => {\n    fetch(`${url}getSpendingByDoctor/${clinicID}`)\n      .then(d => d.json())\n      .then(updateSpending);\n    // .then(a => updateVisitByID(\"5ddc8639e8705d24251d60c3\"));\n  }, [clinicID]);\n  const nameAmountPairs = Object.values(spending).sort(\n    ({ amount }, b) => b.amount - amount\n  );\n\n  if (nameAmountPairs.length) {\n    return (\n      <>\n        In the last year at {clinicName} you have spent these amounts. (Highest\n        to lowest)\n        <ol>\n          {nameAmountPairs.map(({ amount, name: drName }) => (\n            <li key={drName}>\n              {drName}: ${amount?.toFixed(2)}\n            </li>\n          ))}\n        </ol>\n        <h2>Visits to {clinicName} by date </h2>\n        <MySelectField\n          label=\"Choose Visit To See Details\"\n          onChange={updateVisitByID}\n        >\n          <option value=\"0\">Choose a Date</option>\n          {visits?.map(({ date, _id }) => (\n            <option key={_id} value={_id}>\n              {new Date(date).toLocaleDateString()}\n            </option>\n          ))}\n        </MySelectField>\n        <OneVisit visit={visit} spending={spending} />\n      </>\n    );\n  }\n  if (!clinicID) return 'Choose a clinic';\n  return 'No spending found for this clinic this year';\n};\n"],"sourceRoot":""}