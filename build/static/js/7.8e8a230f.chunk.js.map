{"version":3,"sources":["../node_modules/webpack/buildin/module.js","random-name/index.js","AddProvider.js"],"names":["module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i","names","require","r","Math","random","length","first","middle","place","last","parent","process","argv","prefill","window","pglOptions","AddProvider","state","name","clinic","type","allMyClinics","providerTypes","SubmitButton","bind","submit","copy","fetch","url","method","body","JSON","stringify","headers","then","json","Input","id","label","required","value","onChange","addValue","SelectType","defaultValue","event","map","key","See","entries","getMyClinics","rando","a","floor","newState","_id","setState","automatic","val","target","this","clinics","setClinic","React","Component"],"mappings":"sHAAAA,EAAOC,QAAU,SAAUD,GAsBzB,OArBKA,EAAOE,kBACVF,EAAOG,UAAY,aAEnBH,EAAOI,MAAQ,GAEVJ,EAAOK,WAAUL,EAAOK,SAAW,IACxCC,OAAOC,eAAeP,EAAQ,SAAU,CACtCQ,YAAY,EACZC,IAAK,SAASA,MACZ,OAAOT,EAAOU,KAGlBJ,OAAOC,eAAeP,EAAQ,KAAM,CAClCQ,YAAY,EACZC,IAAK,SAASA,MACZ,OAAOT,EAAOW,KAGlBX,EAAOE,gBAAkB,GAGpBF,I,oBCtBT,kBAAIY,EAAQC,EAAQ,IAEpB,SAASC,EAAEF,GACT,OAAO,WACL,OAAOA,KAASG,KAAKC,SAAWJ,EAAMK,UAI1C,IAAID,EAAUhB,EAAOC,QAAU,WAC7B,OAAOa,EAAEF,GAAS,IAAME,EAAEF,IAK5B,GAFAI,EAAOE,MAAQF,EAAOG,OAASH,EAAOI,MAAQJ,EAAOK,KAAOP,EAAEF,IAEzDZ,EAAOsB,OACFC,EAAQC,KAAK,K,wiBCJfC,EAAYC,OAAOC,WAAnBF,QACaG,E,yOACnBC,MAAQ,CACNC,KAAML,EAAUT,IAAOE,QAAU,IAAMF,IAAOK,OAAS,GACvDU,OAAQ,KACRC,KAAMP,EAAU,KAAO,GACvBQ,aAAc,I,EAEhBC,cAAgB,CAAC,KAAM,KAAM,KAAM,O,EACnCC,aAAeA,eAAaC,KAAb,gB,EAEfC,OAAS,WACP,IAAMC,E,mXAAI,IAAQ,EAAKT,cAChBS,EAAKL,aACZM,MAAMC,MAAM,WAAY,CACtBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBO,QAAS,CAAE,eAAgB,sBAC1BC,MAAK,SAAAhC,GAAC,OAAIA,EAAEiC,W,EAkBjBC,MAAQ,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACN,kBAAC,mBAAD,CACEC,UAAQ,EACRD,MAAOA,EACPE,MAAO,EAAKvB,MAAMoB,GAClBI,SAAU,EAAKC,SAASlB,KAAd,eAAyBa,M,EAGvCM,WAAa,kBACX,kBAAC,gBAAD,CACEL,MAAM,gBACNM,aAAa,KACbH,SAAU,kBAAAI,GAAK,OAAI,EAAKH,SAAS,OAAQG,KAExC,EAAKvB,cAAcwB,KAAI,SAAA1B,GAAI,OAC1B,4BAAQ2B,IAAK3B,EAAMoB,MAAOpB,GACvBA,Q,EAKT4B,IAAM,kBACJ,kBAAC,UAAD,KACGtD,OAAOuD,QAAQ,EAAKhC,OAAO6B,KAC1B,mCAAEC,EAAF,KAAOP,EAAP,WACU,iBAARO,GACE,yBAAKA,IAAKA,GACPA,EADH,OACYP,Q,yHA3CD,IAAD,OAClBU,yBAAehB,MAAK,SAAAhC,GAClB,IAAMiD,EAAQ,SAARA,MAAQC,GAAC,OAAIjD,KAAKkD,MAAMlD,KAAKC,SAAWgD,IACxCE,EAAW,CAAEjC,aAAcnB,GAC7BW,IACFyC,EAASlC,KAAO,EAAKE,cAAc6B,EAAM,IACzCG,EAASnC,OAASjB,EAAEiD,EAAMjD,EAAEG,SAASkD,KAEvC,EAAKC,SAASF,EAAUG,YAAY,EAAKhC,OAAS,mB,wCAG7CsB,EAAKW,GACZ,IAAMJ,EAAW,GACjBA,EAASP,GAAOW,EAAIC,OAAOnB,MAC3BoB,KAAKJ,SAASF,K,sCAoCN,IACAjC,EAAiBuC,KAAK3C,MAAtBI,aACR,OACE,oCACE,uBAAM2B,IAAN,MACA,kBAAC,eAAD,CACEa,QAASxC,EACTyC,UAAWF,KAAKlB,SAASlB,KAAKoC,KAAM,YAEtC,uBAAMxB,MAAN,CAAYC,GAAG,OAAOC,MAAM,kBAC5B,uBAAMK,WAAN,MACA,uBAAMpB,aAAN,W,aAhFiCwC,IAAMC","file":"static/js/7.8e8a230f.chunk.js","sourcesContent":["module.exports = function (module) {\n  if (!module.webpackPolyfill) {\n    module.deprecate = function () {};\n\n    module.paths = []; // module.parent = undefined by default\n\n    if (!module.children) module.children = [];\n    Object.defineProperty(module, \"loaded\", {\n      enumerable: true,\n      get: function get() {\n        return module.l;\n      }\n    });\n    Object.defineProperty(module, \"id\", {\n      enumerable: true,\n      get: function get() {\n        return module.i;\n      }\n    });\n    module.webpackPolyfill = 1;\n  }\n\n  return module;\n};","var names = require('./names.json');\n\nfunction r(names) {\n  return function() {\n    return names[~~(Math.random() * names.length)];\n  };\n}\n\nvar random = (module.exports = function() {\n  return r(names) + ' ' + r(names);\n});\n\nrandom.first = random.middle = random.place = random.last = r(names);\n\nif (!module.parent) {\n  var l = process.argv[2] || 10;\n}\n","import React from 'react';\nimport { url, getMyClinics, automatic } from './url';\nimport random from './random-name';\nimport {\n  SelectClinic,\n  DevInfo,\n  SubmitButton,\n  MySelectField,\n  MyTextInputField,\n} from './Fields';\n\nconst { prefill } = window.pglOptions;\nexport default class AddProvider extends React.Component {\n  state = {\n    name: prefill ? random.first() + ' ' + random.last() : '',\n    clinic: null,\n    type: prefill ? 'MD' : '',\n    allMyClinics: [],\n  };\n  providerTypes = ['MD', 'PA', 'NP', 'MSN'];\n  SubmitButton = SubmitButton.bind(this);\n\n  submit = () => {\n    const copy = { ...this.state };\n    delete copy.allMyClinics;\n    fetch(url + 'provider', {\n      method: 'POST',\n      body: JSON.stringify(copy),\n      headers: { 'Content-Type': 'application/json' },\n    }).then(r => r.json());\n  };\n  componentDidMount() {\n    getMyClinics().then(r => {\n      const rando = a => Math.floor(Math.random() * a);\n      const newState = { allMyClinics: r };\n      if (prefill) {\n        newState.type = this.providerTypes[rando(4)];\n        newState.clinic = r[rando(r.length)]._id;\n      }\n      this.setState(newState, automatic ? this.submit : () => {});\n    });\n  }\n  addValue(key, val) {\n    const newState = {};\n    newState[key] = val.target.value;\n    this.setState(newState);\n  }\n  Input = ({ id, label }) => (\n    <MyTextInputField\n      required\n      label={label}\n      value={this.state[id]}\n      onChange={this.addValue.bind(this, id)}\n    />\n  );\n  SelectType = () => (\n    <MySelectField\n      label=\"Provider Type\"\n      defaultValue=\"MD\"\n      onChange={event => this.addValue('type', event)}\n    >\n      {this.providerTypes.map(type => (\n        <option key={type} value={type}>\n          {type}\n        </option>\n      ))}\n    </MySelectField>\n  );\n  See = () => (\n    <DevInfo>\n      {Object.entries(this.state).map(\n        ([key, value]) =>\n          key !== 'allMyClinics' && (\n            <div key={key}>\n              {key} is {value}\n            </div>\n          )\n      )}\n    </DevInfo>\n  );\n\n  render() {\n    const { allMyClinics } = this.state;\n    return (\n      <>\n        <this.See />\n        <SelectClinic\n          clinics={allMyClinics}\n          setClinic={this.addValue.bind(this, 'clinic')}\n        />\n        <this.Input id=\"name\" label=\"Provider Name\" />\n        <this.SelectType />\n        <this.SubmitButton />\n      </>\n    );\n  }\n}\n"],"sourceRoot":""}