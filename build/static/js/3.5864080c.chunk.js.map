{"version":3,"sources":["Login.js","Validation.js"],"names":["Login","setUser","user","useState","failed","setFailed","to","display","alignItems","justifyContent","height","width","border","src","logo","alt","initialValues","username","password","onSubmit","submit","values","fetch","url","method","body","JSON","stringify","headers","then","r","json","loginResult","validationSchema","LoginSchema","isSubmitting","component","Err","name","as","MyTextInputField","label","type","disabled","children","AddVisitSchema","Yup","min","max","required","email","shape","clinic","providers","amountSpent","reason","date","SignupSchema"],"mappings":"uPAuEeA,UA7DD,SAARA,MAAS,GAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAAW,EACPC,oBAAS,GADF,mBAC5BC,EAD4B,KACpBC,EADoB,KAenC,OAAOH,EACL,kBAAC,IAAD,CAAUI,GAAG,MAEb,kBAAC,IAAD,CACEC,QAAQ,OACRC,WAAW,SACXC,eAAe,SACfC,OAAO,QAEP,kBAAC,IAAD,CAAMC,MAAM,OAAOC,OAAO,WACxB,yBAAKC,IAAKC,IAAMJ,OAAO,OAAOK,IAAI,aAClC,kBAAC,IAAD,CACEC,cAGM,CAAEC,SAAU,GAAIC,SAAU,IAEhCC,SA9BO,SAATC,OAASC,GACbC,MAAM,GAAD,OAAIC,MAAJ,SAAgB,CACnBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,GACrBO,QAAS,CAAE,eAAgB,sBAE1BC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GACAA,EAAa/B,EAAQ+B,GACpB3B,GAAU,OAsBb4B,iBAAkBC,gBAEjB,gBAAGC,EAAH,EAAGA,aAAH,OACC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAcC,UAAWC,MAAKC,KAAK,aACnC,kBAAC,IAAD,CAAOC,GAAIC,mBAAkBF,KAAK,WAAWG,MAAM,aACnD,kBAAC,IAAD,CAAcL,UAAWC,MAAKC,KAAK,aACnC,kBAAC,IAAD,CACEC,GAAIC,mBACJF,KAAK,WACLG,MAAM,WACNC,KAAK,aAEP,kBAAC,IAAD,CAAQA,KAAK,SAASC,SAAUR,EAAcS,SAAS,WACtDxC,GACC,kBAAC,IAAD,CAAMO,MAAM,OAAOC,OAAO,WAA1B,yG,gCC1DhB,4JAgBaiC,GAdKC,WACfC,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YAEKH,WACdC,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YAEEH,WACXI,MAAM,iBACND,SAAS,YAEkBH,WAAaK,MAAM,CAC/CC,OAAQN,WACLC,IAAI,EAAG,mBACPE,SAAS,YACZI,UAAWP,UACRC,IAAI,EAAG,gCACPE,SAAS,YACZK,YAAaR,WACVC,IAAI,EAAG,sBACPE,SAAS,YACZM,OAAQT,WACLC,IAAI,EAAG,2BACPE,SAAS,YACZO,KAAMV,WACHC,IAAI,EAAG,uBACPE,SAAS,eAIDf,EAAcY,WAAaK,MAAM,CAC5ClC,SAAU6B,WAAaG,WACvB/B,SAAU4B,WAAaG,aAGZQ,EAAeX,WAAaK,MAAM,CAC7CD,MAAOJ,WAAaG,WACpB/B,SAAU4B,WAAaG","file":"static/js/3.5864080c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Pane } from 'evergreen-ui';\nimport './App.css';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { url } from './url';\nimport { Err, MyTextInputField } from './Fields';\nimport { LoginSchema } from './Validation';\nimport logo from './image/pnglogo.png';\nimport { Redirect } from 'react-router-dom';\n\nconst Login = ({ setUser, user }) => {\n  const [failed, setFailed] = useState(false);\n  const submit = values => {\n    fetch(`${url}login`, {\n      method: 'POST',\n      body: JSON.stringify(values),\n      headers: { 'Content-Type': 'application/json' },\n    })\n      .then(r => r.json())\n      .then(loginResult => {\n        if (loginResult) setUser(loginResult);\n        else setFailed(true);\n      });\n  };\n\n  return user ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <Pane\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      height=\"70vh\"\n    >\n      <Pane width=\"90vw\" border=\"default\">\n        <img src={logo} height=\"47px\" alt=\"pgl logo\" />\n        <Formik\n          initialValues={\n            process.env.NODE_ENV === 'development'\n              ? { username: 'test', password: 'wonderboy' }\n              : { username: '', password: '' }\n          }\n          onSubmit={submit}\n          validationSchema={LoginSchema}\n        >\n          {({ isSubmitting }) => (\n            <Form>\n              <ErrorMessage component={Err} name=\"username\" />\n              <Field as={MyTextInputField} name=\"username\" label=\"Username\" />\n              <ErrorMessage component={Err} name=\"password\" />\n              <Field\n                as={MyTextInputField}\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n              />\n              <Button type=\"submit\" disabled={isSubmitting} children=\"Submit\" />\n              {failed && (\n                <Pane width=\"90vw\" border=\"default\">\n                  'Password or username is incorrect, please try again or\n                  contact tech support at 985-966-5497'\n                </Pane>\n              )}\n            </Form>\n          )}\n        </Formik>\n      </Pane>\n    </Pane>\n  );\n};\n\nexport default Login;\n","import * as Yup from 'yup';\n\nconst firstName = Yup.string()\n  .min(2, 'Too Short!')\n  .max(50, 'Too Long!')\n  .required('Required');\n\nconst lastName = Yup.string()\n  .min(2, 'Too Short!')\n  .max(50, 'Too Long!')\n  .required('Required');\n\nconst email = Yup.string()\n  .email('Invalid email')\n  .required('Required');\n\nexport const AddVisitSchema = Yup.object().shape({\n  clinic: Yup.string()\n    .min(2, 'Choose a clinic')\n    .required('Required'),\n  providers: Yup.array()\n    .min(1, 'Choose at least one provider')\n    .required('Required'),\n  amountSpent: Yup.string()\n    .min(1, 'Enter Amount Spent')\n    .required('Required'),\n  reason: Yup.string()\n    .min(2, 'Choose Reason For Visit')\n    .required('Required'),\n  date: Yup.string()\n    .min(2, 'Enter Date and Time')\n    .required('Required'),\n  // materials: Yup.array().min(1, \"Choose at least one type of materials\")\n  // firstName, lastName,\n});\nexport const LoginSchema = Yup.object().shape({\n  username: Yup.string().required(),\n  password: Yup.string().required(),\n});\n\nexport const SignupSchema = Yup.object().shape({\n  email: Yup.string().required(),\n  password: Yup.string().required(),\n});\n"],"sourceRoot":""}