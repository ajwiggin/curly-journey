{"version":3,"sources":["../node_modules/webpack/buildin/module.js","random-name/index.js","AddClinic.js"],"names":["module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i","names","require","r","Math","random","length","first","middle","place","last","parent","process","argv","prefill","window","pglOptions","AddClinic","submit","fetch","url","method","body","JSON","stringify","state","headers","then","json","Input","id","label","required","value","onChange","addValue","bind","See","entries","map","key","name","address","SubmitButton","automatic","this","val","newState","target","setState","link","href","React","Component"],"mappings":"sHAAAA,EAAOC,QAAU,SAAUD,GAsBzB,OArBKA,EAAOE,kBACVF,EAAOG,UAAY,aAEnBH,EAAOI,MAAQ,GAEVJ,EAAOK,WAAUL,EAAOK,SAAW,IACxCC,OAAOC,eAAeP,EAAQ,SAAU,CACtCQ,YAAY,EACZC,IAAK,SAASA,MACZ,OAAOT,EAAOU,KAGlBJ,OAAOC,eAAeP,EAAQ,KAAM,CAClCQ,YAAY,EACZC,IAAK,SAASA,MACZ,OAAOT,EAAOW,KAGlBX,EAAOE,gBAAkB,GAGpBF,I,oBCtBT,kBAAIY,EAAQC,EAAQ,IAEpB,SAASC,EAAEF,GACT,OAAO,WACL,OAAOA,KAASG,KAAKC,SAAWJ,EAAMK,UAI1C,IAAID,EAAUhB,EAAOC,QAAU,WAC7B,OAAOa,EAAEF,GAAS,IAAME,EAAEF,IAK5B,GAFAI,EAAOE,MAAQF,EAAOG,OAASH,EAAOI,MAAQJ,EAAOK,KAAOP,EAAEF,IAEzDZ,EAAOsB,OACFC,EAAQC,KAAK,K,yTCXfC,EAAYC,OAAOC,WAAnBF,QAEaG,E,YACnB,qBAAe,IAAD,sCACZ,uDAQFC,OAAS,WACPC,MAAM,GAAD,OAAIC,MAAJ,UAAiB,CACpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,EAAKC,OAC1BC,QAAS,CAAE,eAAgB,sBAC1BC,MAAK,SAAAxB,GAAC,OAAIA,EAAEyB,WAdH,EA2BdC,MAAQ,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACN,kBAAC,mBAAD,CACEA,MAAOA,EACPC,UAAQ,EACRC,MAAO,EAAKR,MAAMK,GAClBI,SAAU,EAAKC,SAASC,KAAd,eAAyBN,MAhCzB,EAoCdO,IAAM,kBACJ,kBAAC,UAAD,KACG1C,OAAO2C,QAAQ,EAAKb,OAAOc,KAAI,mCAAEC,EAAF,KAAOP,EAAP,YAC9B,yBAAKO,IAAKA,GACPA,EADH,OACYP,QAtChB,EAAKR,MAAQ,CACXgB,KAAM3B,EAAO,UAAMT,IAAOK,OAAb,WAA+B,GAC5CgC,QAAS5B,EAAU,OAAST,IAAOG,SAAW,OAAS,IAEzD,EAAKmC,aAAeA,eAAaP,KAAb,gBANR,E,mHAkBRQ,aAAWC,KAAK3B,W,wCAGbsB,EAAKM,GACZ,IAAMC,EAAW,GACjBA,EAASP,GAAOM,EAAIE,OAAOf,MAC3BY,KAAKI,SAASF,K,sCAuBd,OACE,oCACE,uBAAMV,IAAN,MACA,uBAAMR,MAAN,CAAYC,GAAG,OAAOC,MAAM,gBAC5B,uBAAMF,MAAN,CAAYC,GAAG,UAAUC,MAAM,mBAC/B,uBAAMY,aAAN,CACEO,KAAM,uBAAGC,KAAM/B,MAAM,eAAf,uC,WAtDuBgC,IAAMC","file":"static/js/6.5460f2fb.chunk.js","sourcesContent":["module.exports = function (module) {\n  if (!module.webpackPolyfill) {\n    module.deprecate = function () {};\n\n    module.paths = []; // module.parent = undefined by default\n\n    if (!module.children) module.children = [];\n    Object.defineProperty(module, \"loaded\", {\n      enumerable: true,\n      get: function get() {\n        return module.l;\n      }\n    });\n    Object.defineProperty(module, \"id\", {\n      enumerable: true,\n      get: function get() {\n        return module.i;\n      }\n    });\n    module.webpackPolyfill = 1;\n  }\n\n  return module;\n};","var names = require('./names.json');\n\nfunction r(names) {\n  return function() {\n    return names[~~(Math.random() * names.length)];\n  };\n}\n\nvar random = (module.exports = function() {\n  return r(names) + ' ' + r(names);\n});\n\nrandom.first = random.middle = random.place = random.last = r(names);\n\nif (!module.parent) {\n  var l = process.argv[2] || 10;\n}\n","import React from 'react';\nimport random from './random-name';\nimport { url, automatic } from './url';\nimport { SubmitButton, DevInfo, MyTextInputField } from './Fields';\nconst { prefill } = window.pglOptions;\n\nexport default class AddClinic extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      name: prefill ? `${random.last()} Clinic` : '',\n      address: prefill ? '100 ' + random.middle() + ' St.' : '',\n    };\n    this.SubmitButton = SubmitButton.bind(this);\n  }\n\n  submit = () => {\n    fetch(`${url}clinic`, {\n      method: 'POST',\n      body: JSON.stringify(this.state),\n      headers: { 'Content-Type': 'application/json' },\n    }).then(r => r.json());\n  };\n\n  componentDidMount() {\n    if (automatic) this.submit();\n  }\n\n  addValue(key, val) {\n    const newState = {};\n    newState[key] = val.target.value;\n    this.setState(newState);\n  }\n\n  Input = ({ id, label }) => (\n    <MyTextInputField\n      label={label}\n      required\n      value={this.state[id]}\n      onChange={this.addValue.bind(this, id)}\n    />\n  );\n\n  See = () => (\n    <DevInfo>\n      {Object.entries(this.state).map(([key, value]) => (\n        <div key={key}>\n          {key} is {value}\n        </div>\n      ))}\n    </DevInfo>\n  );\n\n  render() {\n    return (\n      <>\n        <this.See />\n        <this.Input id=\"name\" label=\"Clinic Name\" />\n        <this.Input id=\"address\" label=\"Clinic Address\" />\n        <this.SubmitButton\n          link={<a href={url + 'addprovider'}>Click Here To Add A Provider</a>}\n        />\n      </>\n    );\n  }\n}\n"],"sourceRoot":""}